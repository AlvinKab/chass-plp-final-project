import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../services/api_service.dart';
import '../../models/engine.dart';

class AddEnginePage extends StatefulWidget {
  @override
  _AddEnginePageState createState() => _AddEnginePageState();
}

class _AddEnginePageState extends State<AddEnginePage> {
  final _formKey = GlobalKey<FormState>();
  final _horsepowerController = TextEditingController();
  final _torqueController = TextEditingController();
  final _rpmController = TextEditingController();
  final _configurationController = TextEditingController();
  String _energyType = 'Petrol';

  bool _isLoading = false;

  void _submit() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      final engine = Engine(
        id: 0, // Assuming ID is auto-generated by the backend
        horsepower: int.parse(_horsepowerController.text),
        torque: int.parse(_torqueController.text),
        rpm: int.parse(_rpmController.text),
        configuration: _configurationController.text,
        energyType: _energyType,
      );

      final apiService = Provider.of<ApiService>(context, listen: false);
      final response = await apiService.addEngine(engine);

      setState(() {
        _isLoading = false;
      });

      if (response.statusCode == 201) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Engine added successfully')),
        );
        Navigator.pop(context);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add engine')),
        );
      }
    }
  }

  @override
  void dispose() {
    _horsepowerController.dispose();
    _torqueController.dispose();
    _rpmController.dispose();
    _configurationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text('Add Engine'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: _isLoading
              ? Center(child: CircularProgressIndicator())
              : Form(
            key: _formKey,
            child: ListView(
              children: [
                TextFormField(
                  controller: _horsepowerController,
                  decoration: InputDecoration(labelText: 'Horsepower'),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null ||
                        value.isEmpty ||
                        int.tryParse(value) == null) {
                      return 'Please enter a valid horsepower';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: _torqueController,
                  decoration: InputDecoration(labelText: 'Torque'),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null ||
                        value.isEmpty ||
                        int.tryParse(value) == null) {
                      return 'Please enter a valid torque';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: _rpmController,
                  decoration: InputDecoration(labelText: 'RPM'),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null ||
                        value.isEmpty ||
                        int.tryParse(value) == null) {
                      return 'Please enter a valid RPM';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: _configurationController,
                  decoration:
                  InputDecoration(labelText: 'Configuration'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter the configuration';
                    }
                    return null;
                  },
                ),
                DropdownButtonFormField<String>(
                  value: _energyType,
                  decoration: InputDecoration(labelText: 'Energy Type'),
                  items: ['Diesel', 'Petrol', 'Hybrid', 'Electric', 'Hydrogen']
                      .map((type) => DropdownMenuItem(
                    value: type,
                    child: Text(type),
                  ))
                      .toList(),
                  onChanged: (value) {
                    setState(() {
                      _energyType = value!;
                    });
                  },
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _submit,
                  child: Text('Add Engine'),
                ),
              ],
            ),
          ),
        ));
  }
}
